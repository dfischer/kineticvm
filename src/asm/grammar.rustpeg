use asm::parser::*;
use super::super::super::sys_registers;

#[pub]
program -> Vec<ObjectR<'input>>
    = end_of_line*
      fo:first_object?
      // strictly speaking, should enforce EOLS between first obj and later ones
      o:(object ** (end_of_line+))
      end_of_line*
      white { if let Some(f) = fo { let mut v = vec![f]; v.extend_from_slice(&o); v } else { o } }

first_object -> ObjectR<'input>
=   code:move_lines
    end_of_line*
    { ObjectR { label: Ident::from_str("MAIN"), code: code }}

object -> ObjectR<'input>
    =   label:label_line
        end_of_line*
        code:move_lines
    { ObjectR { label: Ident::from_str(label), code: code } }

// types: user registers, system registers, immediates, labels

label_line -> &'input str
    = white s:$( ident ) white ":" {s}

move_lines -> Vec<MoveR<'input>>
    = l:(move_line ** (end_of_line+)) { l }

move_line -> MoveR<'input>
    = white a:source_reg white "->" white b:dest_reg { MoveR(a, b) }

// types: user registers, system registers, immediates, labels

source_reg -> RegisterR<'input>
    = imm:$("-"? [0-9]+) { RegisterR::Immed(imm.parse::<i16>().unwrap()) }
    / u:$(ident) { RegisterR::User(Ident::from_str(u)) }
    / "%"  u:system_reg { RegisterR::System(u) }
    / ":"  u:$(ident) { RegisterR::Label(Ident::from_str(u)) }

dest_reg -> RegisterR<'input>
    = u:$(ident) { RegisterR::User(Ident::from_str(u)) }
    / "%" u:system_reg { RegisterR::System(u) }

system_reg -> Register =
      "LHS" { sys_registers::LHS }
    / "BIT_AND" { sys_registers::BIT_AND }
    / "BIT_OR" { sys_registers::BIT_OR }
    / "BIT_XOR" { sys_registers::BIT_XOR }
    / "CODE_OBJECT" { sys_registers::CODE_OBJECT }
    / "DIFF" { sys_registers::DIFF }
    / "HALT" { sys_registers::HALT }
    / "MEM_OBJECT_SIZE" { sys_registers::MEM_OBJECT_SIZE }
    / "MEM_OFFSET" { sys_registers::MEM_OFFSET }
    / "MEM_PTR" { sys_registers::MEM_PTR }
    / "MEM_VALUE" { sys_registers::MEM_VALUE }
    / "NOT" { sys_registers::NOT }
    / "OUT" { sys_registers::OUT }
    / "PC" { sys_registers::PC }
    / "PRODUCT" { sys_registers::PRODUCT }
    / "QUOTIENT" { sys_registers::QUOTIENT }
    / "RHS" { sys_registers::RHS }
    / "SHIFT_AR" { sys_registers::SHIFT_AR }
    / "SHIFT_LR" { sys_registers::SHIFT_LR }
    / "SHIFT_L" { sys_registers::SHIFT_L }
    / "SKIP_INSTR" { sys_registers::SKIP_INSTR }
    / "SUM" { sys_registers::SUM }
    / "MAX" { sys_registers::MAX }
    / "MIN" { sys_registers::MIN }


// basic tokens

ident -> &'input str
    = $([a-zA-Z_\-0-9]+)

optional_comment
    = white / white ";" [^\n]*


end_of_line
    = white "\n"
    / white ";" [^\n]* "\n"

white
    = [ \t]*